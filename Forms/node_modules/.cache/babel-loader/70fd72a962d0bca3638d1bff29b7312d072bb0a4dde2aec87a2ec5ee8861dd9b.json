{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Patryk S\\u0105siadek\\\\Documents\\\\GitHub\\\\React-Max-Course\\\\Forms\\\\src\\\\components\\\\BasicForm.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport EmailInput from \"./EmailInput\";\nimport NameInput from \"./NameInput\";\nimport SurnameInput from \"./SurnameInput\";\nimport InputBlock from \"./Input\";\nimport useInput from \"../hooks/use-input\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BasicForm = () => {\n  _s();\n  const [nameInputIsInvalid, setNameInputIsInvalid] = useState(false);\n  const [emailInputIsInvalid, setEmailInputIsInvalid] = useState(false);\n  const [surnameInputIsInvalid, setSurnameInputIsInvalid] = useState(false);\n  const [resetBooleanValue, setResetBooleanValue] = useState(false);\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangedHandler,\n    inputBlurHandler: nameBlurHandler,\n    reset: resetNameInput\n  } = useInput(value => value.trim !== \"\");\n  let nameValue, surnameValue, emailValue;\n  const resetBooleanValueHandler = e => {\n    setResetBooleanValue(false);\n  };\n  const submitHandler = e => {\n    e.preventDefault();\n    if (nameValue === undefined || surnameValue === undefined || emailValue === undefined) return;\n    const data = {\n      name: nameValue,\n      surname: surnameValue,\n      email: emailValue\n    };\n    console.log(`Form subbmited with this particular data:\n    Name: ${data.name}\n    Surname: ${data.surname}\n    E-mail: ${data.email}`);\n    setResetBooleanValue(true);\n  };\n  const checkNameValidation = isInvalid => {\n    setNameInputIsInvalid(isInvalid);\n  };\n  const checkSurnameValidation = isInvalid => {\n    setSurnameInputIsInvalid(isInvalid);\n  };\n  const checkEmailValidation = isInvalid => {\n    setEmailInputIsInvalid(isInvalid);\n  };\n  const getNameValue = value => {\n    nameValue = value;\n  };\n  const getSurnameValue = value => {\n    surnameValue = value;\n  };\n  const getEmailValue = value => {\n    emailValue = value;\n  };\n  const nameInputClasses = nameInputIsInvalid ? \"form-control invalid\" : \"form-control\";\n  const emailInputClasses = emailInputIsInvalid ? \"form-control invalid\" : \"form-control\";\n  const surnameInputClasses = surnameInputIsInvalid ? \"form-control invalid\" : \"form-control\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: submitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"control-group\",\n      children: [/*#__PURE__*/_jsxDEV(InputBlock, {\n        validationFunction: value => value.trim() !== \"\",\n        type: \"text\",\n        id: \"name\",\n        errorText: \"Name must not be empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputBlock, {\n        validationFunction: value => value.trim() !== \"\",\n        type: \"text\",\n        id: \"surname\",\n        errorText: \"Surname must not be empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: surnameInputClasses,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"surname\",\n          children: \"Last Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(SurnameInput, {\n          type: \"text\",\n          id: \"surname\",\n          isInvalid: checkSurnameValidation,\n          value: getSurnameValue,\n          resetBoolean: resetBooleanValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: emailInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"E-Mail Address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EmailInput, {\n        type: \"email\",\n        id: \"email\",\n        isInvalid: checkEmailValidation,\n        value: getEmailValue,\n        resetBoolean: resetBooleanValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n_s(BasicForm, \"9yK4qTkDueX/MrD564vTgZgHomE=\", false, function () {\n  return [useInput];\n});\n_c = BasicForm;\nexport default BasicForm;\nvar _c;\n$RefreshReg$(_c, \"BasicForm\");","map":{"version":3,"names":["useState","EmailInput","NameInput","SurnameInput","InputBlock","useInput","jsxDEV","_jsxDEV","BasicForm","_s","nameInputIsInvalid","setNameInputIsInvalid","emailInputIsInvalid","setEmailInputIsInvalid","surnameInputIsInvalid","setSurnameInputIsInvalid","resetBooleanValue","setResetBooleanValue","value","enteredName","isValid","enteredNameIsValid","hasError","nameInputHasError","valueChangeHandler","nameChangedHandler","inputBlurHandler","nameBlurHandler","reset","resetNameInput","trim","nameValue","surnameValue","emailValue","resetBooleanValueHandler","e","submitHandler","preventDefault","undefined","data","name","surname","email","console","log","checkNameValidation","isInvalid","checkSurnameValidation","checkEmailValidation","getNameValue","getSurnameValue","getEmailValue","nameInputClasses","emailInputClasses","surnameInputClasses","onSubmit","children","className","validationFunction","type","id","errorText","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","resetBoolean","_c","$RefreshReg$"],"sources":["C:/Users/Patryk SÄ…siadek/Documents/GitHub/React-Max-Course/Forms/src/components/BasicForm.js"],"sourcesContent":["import { useState } from \"react\";\nimport EmailInput from \"./EmailInput\";\nimport NameInput from \"./NameInput\";\nimport SurnameInput from \"./SurnameInput\";\nimport InputBlock from \"./Input\";\nimport useInput from \"../hooks/use-input\";\n\nconst BasicForm = () => {\n  const [nameInputIsInvalid, setNameInputIsInvalid] = useState(false);\n  const [emailInputIsInvalid, setEmailInputIsInvalid] = useState(false);\n  const [surnameInputIsInvalid, setSurnameInputIsInvalid] = useState(false);\n  const [resetBooleanValue, setResetBooleanValue] = useState(false);\n\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangedHandler,\n    inputBlurHandler: nameBlurHandler,\n    reset: resetNameInput,\n  } = useInput((value) => value.trim !== \"\");\n\n  let nameValue, surnameValue, emailValue;\n\n  const resetBooleanValueHandler = (e) => {\n    setResetBooleanValue(false);\n  };\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n\n    if (\n      nameValue === undefined ||\n      surnameValue === undefined ||\n      emailValue === undefined\n    )\n      return;\n\n    const data = {\n      name: nameValue,\n      surname: surnameValue,\n      email: emailValue,\n    };\n\n    console.log(`Form subbmited with this particular data:\n    Name: ${data.name}\n    Surname: ${data.surname}\n    E-mail: ${data.email}`);\n\n    setResetBooleanValue(true);\n  };\n\n  const checkNameValidation = (isInvalid) => {\n    setNameInputIsInvalid(isInvalid);\n  };\n\n  const checkSurnameValidation = (isInvalid) => {\n    setSurnameInputIsInvalid(isInvalid);\n  };\n\n  const checkEmailValidation = (isInvalid) => {\n    setEmailInputIsInvalid(isInvalid);\n  };\n\n  const getNameValue = (value) => {\n    nameValue = value;\n  };\n\n  const getSurnameValue = (value) => {\n    surnameValue = value;\n  };\n\n  const getEmailValue = (value) => {\n    emailValue = value;\n  };\n\n  const nameInputClasses = nameInputIsInvalid\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  const emailInputClasses = emailInputIsInvalid\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  const surnameInputClasses = surnameInputIsInvalid\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  return (\n    <form onSubmit={submitHandler}>\n      <div className=\"control-group\">\n        <InputBlock\n          validationFunction={(value) => value.trim() !== \"\"}\n          type=\"text\"\n          id=\"name\"\n          errorText={\"Name must not be empty.\"}\n        />\n\n        <InputBlock\n          validationFunction={(value) => value.trim() !== \"\"}\n          type=\"text\"\n          id=\"surname\"\n          errorText={\"Surname must not be empty.\"}\n        />\n\n        <div className={surnameInputClasses}>\n          <label htmlFor=\"surname\">Last Name</label>\n          <SurnameInput\n            type=\"text\"\n            id=\"surname\"\n            isInvalid={checkSurnameValidation}\n            value={getSurnameValue}\n            resetBoolean={resetBooleanValue}\n          />\n        </div>\n      </div>\n      <div className={emailInputClasses}>\n        <label htmlFor=\"name\">E-Mail Address</label>\n        <EmailInput\n          type=\"email\"\n          id=\"email\"\n          isInvalid={checkEmailValidation}\n          value={getEmailValue}\n          resetBoolean={resetBooleanValue}\n        />\n      </div>\n      <div className=\"form-actions\">\n        <button>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default BasicForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}