{"ast":null,"code":"var _jsxFileName = \"F:\\\\React Max Course\\\\React-router\\\\12-adv-starting-project\\\\frontend\\\\src\\\\pages\\\\Events.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function EventsPage() {\n  _s();\n  const data = useLoaderData();\n  const events = data.events;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(EventsList, {\n      events: events\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 4\n    }, this)\n  }, void 0, false);\n}\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport const eventsLoader = async () => {\n  const response = await fetch('http://localhost:8080/events!');\n  if (!response.ok) {\n    throw new Response(JSON.stringify({\n      message: 'Could not fetch events.',\n      status: 500\n    }));\n  } else {\n    return response;\n  }\n};\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","EventsList","jsxDEV","_jsxDEV","Fragment","_Fragment","EventsPage","_s","data","events","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","eventsLoader","response","fetch","ok","Response","JSON","stringify","message","status","$RefreshReg$"],"sources":["F:/React Max Course/React-router/12-adv-starting-project/frontend/src/pages/Events.js"],"sourcesContent":["import { useLoaderData } from 'react-router-dom';\r\n\r\nimport EventsList from '../components/EventsList';\r\n\r\nexport function EventsPage() {\r\n\tconst data = useLoaderData();\r\n\r\n\tconst events = data.events;\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<EventsList events={events} />\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport const eventsLoader = async () => {\r\n\tconst response = await fetch('http://localhost:8080/events!');\r\n\r\n\tif (!response.ok) {\r\n\t\tthrow new Response(JSON.stringify({ message: 'Could not fetch events.', status: 500 }));\r\n\t} else {\r\n\t\treturn response;\r\n\t}\r\n};\r\n"],"mappings":";;AAAA,SAASA,aAAa,QAAQ,kBAAkB;AAEhD,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAElD,OAAO,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EAC5B,MAAMC,IAAI,GAAGR,aAAa,CAAC,CAAC;EAE5B,MAAMS,MAAM,GAAGD,IAAI,CAACC,MAAM;EAE1B,oBACCN,OAAA,CAAAE,SAAA;IAAAK,QAAA,eACCP,OAAA,CAACF,UAAU;MAACQ,MAAM,EAAEA;IAAO;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC,gBAC7B,CAAC;AAEL;AAACP,EAAA,CAVeD,UAAU;EAAA,QACZN,aAAa;AAAA;AAAAe,EAAA,GADXT,UAAU;AAY1B,OAAO,MAAMU,YAAY,GAAG,MAAAA,CAAA,KAAY;EACvC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,CAAC;EAE7D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IACjB,MAAM,IAAIC,QAAQ,CAACC,IAAI,CAACC,SAAS,CAAC;MAAEC,OAAO,EAAE,yBAAyB;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC,CAAC;EACxF,CAAC,MAAM;IACN,OAAOP,QAAQ;EAChB;AACD,CAAC;AAAC,IAAAF,EAAA;AAAAU,YAAA,CAAAV,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}